"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonceManager__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "sender",
                type: "address",
            },
            {
                internalType: "uint192",
                name: "key",
                type: "uint192",
            },
        ],
        name: "getNonce",
        outputs: [
            {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint192",
                name: "key",
                type: "uint192",
            },
        ],
        name: "incrementNonce",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
            {
                internalType: "uint192",
                name: "",
                type: "uint192",
            },
        ],
        name: "nonceSequenceNumber",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
var _bytecode = "0x608060405234801561001057600080fd5b50610432806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630bd28e3b146100465780631b2e01b81461006257806335567e1a14610092575b600080fd5b610060600480360381019061005b9190610286565b6100c2565b005b61007c60048036038101906100779190610311565b61015e565b604051610089919061036a565b60405180910390f35b6100ac60048036038101906100a79190610311565b610183565b6040516100b9919061036a565b60405180910390f35b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008277ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610156906103b4565b919050555050565b6000602052816000526040600020602052806000526040600020600091509150505481565b600060408277ffffffffffffffffffffffffffffffffffffffffffffffff16901b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008477ffffffffffffffffffffffffffffffffffffffffffffffff1677ffffffffffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205417905092915050565b600080fd5b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b61026381610236565b811461026e57600080fd5b50565b6000813590506102808161025a565b92915050565b60006020828403121561029c5761029b610231565b5b60006102aa84828501610271565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102de826102b3565b9050919050565b6102ee816102d3565b81146102f957600080fd5b50565b60008135905061030b816102e5565b92915050565b6000806040838503121561032857610327610231565b5b6000610336858286016102fc565b925050602061034785828601610271565b9150509250929050565b6000819050919050565b61036481610351565b82525050565b600060208201905061037f600083018461035b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006103bf82610351565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036103f1576103f0610385565b5b60018201905091905056fea2646970667358221220834236a8a750314be3c5751b4606fdae1d48ca9a9bb849eb794b583899041c1d64736f6c63430008120033";
var isSuperArgs = function (xs) { return xs.length > 1; };
var NonceManager__factory = exports.NonceManager__factory = /** @class */ (function (_super) {
    __extends(NonceManager__factory, _super);
    function NonceManager__factory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        if (isSuperArgs(args)) {
            _this = _super.apply(this, args) || this;
        }
        else {
            _this = _super.call(this, _abi, _bytecode, args[0]) || this;
        }
        return _this;
    }
    NonceManager__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    NonceManager__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    NonceManager__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    NonceManager__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    NonceManager__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    NonceManager__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    NonceManager__factory.bytecode = _bytecode;
    NonceManager__factory.abi = _abi;
    return NonceManager__factory;
}(ethers_1.ContractFactory));
